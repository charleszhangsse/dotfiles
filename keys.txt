/* insert and replace*/
o: insert in this line
i: insert current
I: insert at beggin
a: insert next
A: insert at end
s: like i, but remove current character
S: like I, but remove whole line
r: replace the current character
R: like i, but in replace mode
J: join 2 lines
~: change the case
U: change the selected to upper case
u: change the selected to lower case

/*moving*/
h: left
l: right
k: up
j: down
10+dir:

0: beigin of cur line
^: begin of the first none space character
$: end of cur line
3$: end of next 3 line
Ctrl + f PgDn
Ctrl + b PgUp
f+character: jump to the character
f: after the above command, it will search further
F+character: jump backward to the character
3f+character: jump to the 3rd character
% moving to matching character for coding
30g goto line 30
gg begining
GG end
50%: goto  50%
H: top of the screen
M: middle of the screen
L: bottom of the screen
C-U: up   half page cursor same
C-D  down half page cursor same
C-E  down one line
C-Y  up   one line
C-F  down one page cursor same
C-B  up   one page cursor same
z+t  cursor line to top
z+b  cursor line to bottom
C-O  back to old position:u
C-I  to new position
''      jump back-forward

:n jump
:$ end of file
:0 begin of file

w: begin of next word
e: end of cur word
E: end of cur word separated by space
ge: end of pre word
b: begin of pre word
[[ startf of prev function
]] start of next function
[{ start of the current block
]} end of the current block
[] end of prev function
[( similar to [[, but working on ( instead of {
[/
]/
[I: find identifier
:checkpath
:checkpath!  actually found
lead M M mark a word
gD: goto definition


Buufers/copy/paste/undo/redo/editing
x: del cur
X: del pre
dw: del word from cur pos
D:  del line from cur pos
dd: del line
Y:  copy cur line
p:  paste after cur cursor
P:  paste before cur cusor
d$  delete to the end of line
d^: delete to the start of line

daw: delete the whole word even cursor is in the middle
5dw: repeat dw 5 times
c2w: just like d2w. but in insert mode

u: undo
3u: undo 3 times



Search:

set incsearch
set hlsearch
set noincrsearch
set nohlsearch

/:  search forward
n:  next
N:  pre
/: using up or down key will see the search history that match the prefix if any
\> as the mark to match end of word
  /open\>  search phrase ends with open
\< as the mark to match beg of word
  /\<open search phrase starts with open
  /\<open\> match whole word only
^ match beginning of line
. match one character


set wrapscan

?: search backward
*: search the next of cur word
#: search the pre of cur word
foo\|bar:  match foo or bar
/one\|two\|three   match one or two or three
/\(foo\|bar\)\+    match 1+ times
/\(ab\)* repeat "ab" 0+ times
/\(ab\)+ repeat "ab" 1+ times
/\(ab\)\{3,5} repeat "ab" 3 to 5 times
\d: digits
\D: non-digits
\x hex digits
\X non-hex
\s white space
\S non-white space
\l lower case
\L non-lower case
\u upper case
\U non-upper case
\n line break
\_s line break or white space
\_. line break or any char
\h  [A-Za-z_]: such as /<\h\w*\> to find c identifier




Working with multiple things:
:e     load a new file (called buffer)
:edit  same as :e
:e <tab>  list files for loading
:edit <tab>  same as :e <tab>

:badd <file>
:bN   Swith to nth file
:bnext next file
:nprevious pre file
:buffers list all buffers
:bfirst
:blast
:ball
:buffers
:ls same as buffers
:bdelete <num>
%: cur buff
#: alt buff
a: 
h: hidden
=: read only
-: not modufiable
+: buf modified
buf <Tab> will 



:tabnew <file>
cat: /tmp/vim.yank: No such file or directory
:tabclose
:tabnext
:tabprevious
:tabfirst
:tablast
gt: next tab
gT: pre tab

:new new window
:oldfiles list all files processed before
:e #<2 to open #2 file
(#<2 can be used for any commands that accept file name as parameter)

:browse oldfiles


Bookmark
m<name>
`<name>
:marks list all bookmarks
:delmarks <name>
global mark are upper case
' cursor posicursor position before last jumption before last jump
" curosr position of last editing
[ start of last change
] end of last change
'' can be used to go back-forward
< begining of visual selection
> end of visual selection

Register
"<register name><comm>
"aY      copy text to register a
"ap      copy text from register a
:registers
eg:
   "fy5w    copy 5 words to register f.
   "fp      copy register f to current cursor

unnamed register
named register
numered registers: from copy and delete
default registers:
  % current file
  # alternative file
  : most recent command
  . last inserted text
  " last used register


Folder
:set foldenable
:set foldmethod=syntax
:set nofoldenable
zc:  close folding
zo:  open folding
zC:  like zc, but all level
zO:  like zO, but all level
zR:  open all folds
zM:  clapse all folds

v: start visual mode
V: visual mode in whole line
Ctrl+v: vissual mode in block
o: other end

Ctrl+^ switch between  file
Ctrl+W +: increase height
Ctrl+W -: decrease height
{height} Ctrl+W _: set height
Ctrl+W <  decrease width
Ctrl+W >  increase size
Ctrl+W K  move the current to top
Ctrl+W H  move the current to far left
Ctrl+W J  move the current to bottom
Ctrl+W L  move the curre to far right


'0 load Previous vi env

:wshada!  <file-name>
:rshada!  <file-name>
! to force overwriting


Sessions
:mksession <file-name>
:source    <file-name>

   A Vim session contains all the information about what you are editing.
This includes things such as the file list, window layout, global variables,
options and other information.  (Exactly what is remembered is controlled by
the 'sessionoptions' option, described below.)

Sessions store many things, but not the position of marks, contents of
registers and the command line history.  You need to use the shada feature
for these things.

Views

A session stores the looks of the whole of Vim.  When you want to store the
properties for one window only, use a view.
:mkview
:loadview
:mkview <file-name>
:loadview <file-name>

:e .

:set display=uhex

Ctrl+W ] open the definition in new window


In Edit mode
Ctrl+W delete a word
Ctrl+U delete whole line before cursor

:se  = :set
:s   = :substitute

:history

q:  open command window

]c: next change
[c: pre change

:tabdo windo set number

<lead> m m: mark current word in current document
* highlight current word
<lead> a: swap between h and c|cpp
ZZ save and quit


In commad line:
% replaced with current file
# replaced with alternative file
#n replace with the file name of buffer n
#<n replace with oldfiles number n

for instance, the following command runs a shell command list the current file
!ls -l %

:help i_CTRL-W
:help CTRL-W: insert mode help for CTRL-W
:help c_%: command line help
:help  <whatever> then Ctrl-D, list all help topic. Match help topic with the prefix
    where whatever the prefix you typed
:help <whatever> <Tab> key will have less choices

:history c
:history =
:history s
:history
:map
:imap
:nmap
:map
:xmap

:nmap <Leader>j :call tmp#GotoJump()


ci): delete everything inside the () and enter insert mode

:help usr_toc.txt

y is action so that it can be combined with other nouns. such as
yte
y3w
cis
das
dG delete until end of the file
dgg delete until start of the file
D: delete until end of line (same as d$)
add (parenthesis)

document location: /usr/share/nvim/runtime/doc/

:options to show help for options

Alternative file: ctrl-^

Ctrl-W  + Ctrl-^:Open the alternative file in a new window

Recording and playback
For instance, there are 5 lines as the following:

stdio.h
fcntl.h
unistd.h
stdlib.h
ctype.h

to:
#include "stdio.h"
#include "fcntl.h"
#include "unistd.h"
#include "stdlib.h"
#include "ctype.h"

We can move to the first character of the first line (s of "stdio").
then press qu to start recording and create a "record" named as u.
then type:
i#include "<Esc>$a"<Esc>0jq

The last q ending the recording
4@u to replay the recording 4 times.

recording to yank shared the same register.

substitution:
:[range]substitute/from/to/[flags]
if "range" is omitted, the it replace the current line only
range: 1,5s/.../.../  from line 1 to line 5
       .,$s/.../.../  from cur line to the last line. Where . is for cur line
marks can be used in range expression
  such as '>,$  is for a range of "begin of the visual selection to the last line
you can speficy a range like .,.+4
flags: g, c

Insert into multiple lines:
For instance, you have tje following 4 lines:
	include one
	include two
	include three
	include four
Move the cursor to the "o" of the first line and press Ctrl-V to
start visual mode. Move it down with 3j to "four". Type
Imain <Esc>, the result will be
	include main one
	include main two
	include main three
	include main four

append to a file:
  :write >> <file name>

a range can be used in write.
:.,$write temp          write from cur line to end to a file named as temp

gU: change object to upper case. such gU3W, change 3 words to upper case
gu: just like gu, but to lower case
gUgU and gugu work on current line (just like dd or yy etc).

:read !ls ~      read the home directory contents into the current file
:0read !date -u  insert the output "date -u" command to first line

"vi -r" to start in recovery mode.

~/.local/share/nvim/swap//:

vi *.cpp to open all cpp of current directory

Commad line edit:
S-Left S-Right move one word
Ctrl-B beging of the command
CtrlE  end of the command

:set cc= <Tab> will fill the old value
q:  command line window

Remembering information; ShaDa   (SHAred DAta)
  Store status including:
      Command line and search history
      Text in registers
      Marks for various files
      The buffer list
      Global variables
12
:help shada

'0
Vim creates marks each time you quit it. The last one is 0, then 1, and so on.
There are 10 of these in total.

:tab help <>   open the help in new tab

redirect help output to files (following commands saving
:map contents to ~/my-mapping.txt)

:redir >> ~/my-mapping.txt
:map
:redir END

Modelines:
	The lines needs to be either the first line or the last line
	(unless the modelines is set).

cd <dir>
:set path+= <path>
gf: fide the file of current cursor

<num>go jump to specific byte of the file

to edit binary file:
vi -b <file>
:%!xxd    show file in hex format
:%!xxd -r read back the binary

Enter special characters:
C-V then 3 digits will enter a character with accii code
:digraohs to show the list

":set virtualedit=all" makes it easier to edit a table
":set virtualedit=" to reset virtual editing mode


